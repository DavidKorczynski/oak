var searchIndex = JSON.parse('{\
"oak_functions":{"doc":"SDK functionality that provides idiomatic Rust wrappers …","t":[5,14,5,5,5,5,5,5,5],"n":["alloc","log","read_request","report_event","report_metric","result_from_status","storage_get_item","write_log_message","write_response"],"q":["oak_functions","","","","","","","",""],"d":["","Logs a debug message.","Reads and returns the user request.","Reports an event for a count-based metrics bucket.","Reports a metric value for a sum-based metrics bucket.","Convert a status returned from a host function call to a …","Looks up an item from the in-memory lookup store.","Writes a debug log message.","Write the response."],"i":[0,0,0,0,0,0,0,0,0],"f":[[[["u32",15]]],null,[[],[["vec",3,["u8"]],["result",4,["vec","oakstatus"]],["oakstatus",4]]],[[["asref",8,["str"]],["str",15]],[["oakstatus",4],["result",4,["oakstatus"]]]],[[["asref",8,["str"]],["str",15],["i64",15]],[["oakstatus",4],["result",4,["oakstatus"]]]],[[["i32",15]],[["oakstatus",4],["result",4,["oakstatus"]]]],[[],[["result",4,["option","oakstatus"]],["oakstatus",4],["option",4,["vec"]]]],[[["asref",8,["str"]],["str",15]],[["oakstatus",4],["result",4,["oakstatus"]]]],[[],[["oakstatus",4],["result",4,["oakstatus"]]]]],"p":[]},\
"test_utils":{"doc":"Test utilities to help with unit testing of Oak-Functions …","t":[3,3,3,3,5,11,11,11,11,11,11,11,11,5,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,12,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Background","MockStaticServer","Term","TestResult","background","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","compile_rust_wasm","default","elapsed","free_port","from","from","from","from","into","into","into","into","into_future","into_request","into_request","into_request","into_request","make_request","poll","response","serialize_entries","serve","set_response_body","terminate_and_join","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip"],"q":["test_utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Wrapper around a termination signal <code>oneshot::Sender</code> and …","A mock implementation of a static server that always …","A wrapper around a termination signal <code>oneshot::Receiver</code>.","","Executes the provided closure passing to it a <code>Term</code> …","","","","","","","","","Uses cargo to compile a Rust manifest to Wasm bytes.","","","","","","","","","","","","","","","","","","","","Serializes the provided map as a contiguous buffer of …","Starts serving, listening on the provided port.","Sets the content of the response body to return for any …","Sends the termination signal to the background task and …","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,1,2,3,4,1,2,3,4,0,4,3,0,1,2,3,4,1,2,3,4,2,1,2,3,4,0,2,3,0,4,4,1,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4],"f":[null,null,null,null,[[],["background",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15],["bool",15]],[["vec",3,["u8"]],["result",6,["vec"]]]],[[],["mockstaticserver",3]],null,[[],["u16",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[],["request",3]],[[["u16",15]]],[[["pin",3],["context",3]],["poll",4]],null,[[["hashmap",3,["vec","vec"]],["vec",3,["u8"]]],[["vec",3,["u8"]],["u8",15]]],[[["u16",15],["future",8]]],[[["vec",3,["u8"]],["u8",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]]],"p":[[3,"Background"],[3,"Term"],[3,"TestResult"],[3,"MockStaticServer"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};