var searchIndex = JSON.parse('{\
"oak_functions":{"doc":"SDK functionality that provides idiomatic Rust wrappers…","i":[[5,"read_request","oak_functions","Reads and returns the user request.",null,[[],[["vec",3],["result",4],["oakstatus",4]]]],[5,"write_response","","Write the response.",null,[[],[["result",4],["oakstatus",4]]]],[5,"storage_get_item","","Looks up an item from the in-memory lookup store.",null,[[],[["result",4],["option",4],["oakstatus",4]]]],[5,"result_from_status","","Convert a status returned from a host function call to a…",null,[[],[["result",4],["oakstatus",4]]]]],"p":[]},\
"test_utils":{"doc":"Test utilities to help with unit testing of Oak-Functions…","i":[[3,"MockStaticServer","test_utils","A mock implementation of a static server that always…",null,null],[5,"compile_rust_wasm","","Uses cargo to compile a Rust manifest to Wasm bytes.",null,[[],[["vec",3],["result",6]]]],[5,"serialize_entries","","Serializes the provided map as a contiguous buffer of…",null,[[["hashmap",3],["vec",3]],["vec",3]]],[11,"set_response_body","","Sets the content of the response body to return for any…",0,[[["vec",3]]]],[11,"serve","","Starts serving, listening on the provided port.",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"default","","",0,[[],["mockstaticserver",3]]]],"p":[[3,"MockStaticServer"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);