var searchIndex = JSON.parse('{\
"oak_functions":{"doc":"SDK functionality that provides idiomatic Rust wrappers…","i":[[5,"read_request","oak_functions","Reads and returns the user request.",null,[[],[["vec",3],["result",4],["oakstatus",4]]]],[5,"write_response","","Write the response.",null,[[],[["result",4],["oakstatus",4]]]],[5,"storage_get_item","","Looks up an item from the in-memory lookup store.",null,[[],[["oakstatus",4],["option",4],["result",4]]]],[5,"write_log_message","","Writes a debug log message.",null,[[["asref",8]],[["result",4],["oakstatus",4]]]],[5,"result_from_status","","Convert a status returned from a host function call to a…",null,[[],[["result",4],["oakstatus",4]]]],[5,"alloc","","",null,[[]]],[14,"log","","Logs a debug message.",null,null]],"p":[]},\
"test_utils":{"doc":"Test utilities to help with unit testing of Oak-Functions…","i":[[3,"MockStaticServer","test_utils","A mock implementation of a static server that always…",null,null],[3,"Background","","Wrapper around a termination signal [`oneshot::Sender`]…",null,null],[3,"Term","","A wrapper around a termination signal [`oneshot::Receiver`].",null,null],[3,"TestResult","","",null,null],[12,"elapsed","","",0,null],[12,"response","","",0,null],[5,"compile_rust_wasm","","Uses cargo to compile a Rust manifest to Wasm bytes.",null,[[],[["vec",3],["result",6]]]],[5,"serialize_entries","","Serializes the provided map as a contiguous buffer of…",null,[[["hashmap",3],["vec",3]],["vec",3]]],[5,"free_port","","",null,[[]]],[5,"background","","Executes the provided closure passing to it a [`Term`]…",null,[[],["background",3]]],[5,"make_request","","",null,[[]]],[0,"proto","","",null,null],[0,"grpc_handler_client","test_utils::proto","Generated client implementations.",null,null],[3,"GrpcHandlerClient","test_utils::proto::grpc_handler_client","",null,null],[11,"connect","","Attempt to create a new client by connecting to a given…",1,[[]]],[11,"new","","",1,[[]]],[11,"with_interceptor","","",1,[[]]],[11,"invoke","","",1,[[]]],[11,"set_response_body","test_utils","Sets the content of the response body to return for any…",2,[[["vec",3]]]],[11,"serve","","Starts serving, listening on the provided port.",2,[[["future",8]]]],[11,"terminate_and_join","","Sends the termination signal to the background task and…",3,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"into_request","","",2,[[],["request",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"into_request","","",3,[[],["request",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"into_future","","",4,[[]]],[11,"into_request","","",4,[[],["request",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"into_request","","",0,[[],["request",3]]],[11,"vzip","","",0,[[]]],[11,"from","test_utils::proto::grpc_handler_client","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"into_request","","",1,[[],["request",3]]],[11,"vzip","","",1,[[]]],[11,"clone","","",1,[[]]],[11,"default","test_utils","",2,[[],["mockstaticserver",3]]],[11,"fmt","test_utils::proto::grpc_handler_client","",1,[[["formatter",3]],["result",6]]],[11,"poll","test_utils","",4,[[["context",3],["pin",3]],["poll",4]]]],"p":[[3,"TestResult"],[3,"GrpcHandlerClient"],[3,"MockStaticServer"],[3,"Background"],[3,"Term"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);