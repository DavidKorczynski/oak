initSidebarItems({"fn":[["channel_close","Close the specified channel [`Handle`]."],["channel_create","Create a new unidirectional channel."],["channel_find","Determine the [`Handle`] for a pre-defined channel, identified by its `port_name`."],["channel_read","Read a message from a channel."],["channel_write","Write a message to a channel."],["logging_channel","Return an instance of the [`std::io::Write`] trait that emits messages to the Node's logging channel."],["set_panic_hook","Install a panic hook that logs [panic information]."],["wait_on_channels","Wait for one or more of the provided handles to become ready for reading from.  On success, the returned vector of [`ChannelReadStatus`] values will be in 1-1 correspondence with the passed-in vector of [`Handle`]s."]],"mod":[["grpc","Functionality to help Oak Nodes interact with gRPC."],["io","Wrappers for Oak SDK types to allow their use with [`std::io`]."],["proto","Auto-generated code for processing protocol buffer message definitions and gRPC service definitions."],["storage","Helper library for accessing Oak storage services."],["wasm","Wasm host functions for interacting with the Oak TCB."]],"struct":[["ReadHandle","Wrapper for a handle to the read half of a channel."],["WriteHandle","Wrapper for a handle to the send half of a channel."]],"type":[["Handle","Handle used to identify read or write channel halves."]]});